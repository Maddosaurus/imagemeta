package canon

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AESetting) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AESetting(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AESetting) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AESetting) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AESetting) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AESetting(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AESetting) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AFAreaMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AFAreaMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AFAreaMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AFAreaMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AFAreaMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AFAreaMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AFAreaMode) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BracketMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = BracketMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BracketMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BracketMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BracketMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = BracketMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BracketMode) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContinuousDrive) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ContinuousDrive(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ContinuousDrive) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ContinuousDrive) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContinuousDrive) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ContinuousDrive(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ContinuousDrive) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExposureMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExposureMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExposureMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExposureMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ExposureMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExposureMode) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FocusDistance) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(2) {
		err = msgp.ArrayError{Wanted: uint32(2), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FocusDistance) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(2))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for za0001 := range z {
		err = en.WriteInt16(z[za0001])
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FocusDistance) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(2))
	for za0001 := range z {
		o = msgp.AppendInt16(o, z[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FocusDistance) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != uint32(2) {
		err = msgp.ArrayError{Wanted: uint32(2), Got: zb0001}
		return
	}
	for za0001 := range z {
		z[za0001], bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FocusDistance) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (2 * (msgp.Int16Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FocusMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocusMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FocusMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FocusMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FocusMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocusMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FocusMode) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FocusRange) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocusRange(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FocusRange) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FocusRange) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FocusRange) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FocusRange(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FocusRange) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MeteringMode) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int16
		zb0001, err = dc.ReadInt16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MeteringMode(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MeteringMode) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt16(int16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MeteringMode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt16(o, int16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MeteringMode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int16
		zb0001, bts, err = msgp.ReadInt16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = MeteringMode(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MeteringMode) Msgsize() (s int) {
	s = msgp.Int16Size
	return
}
